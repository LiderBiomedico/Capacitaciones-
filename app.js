/* ==========================================
   SISTEMA DE CAPACITACIONES - VERSI√ìN SEGURA
   Hospital Susana L√≥pez de Valencia
   
   ‚ö†Ô∏è SEGURIDAD:
   - NO guarda credenciales en localStorage
   - Todas las peticiones pasan por Netlify Functions
   - Las credenciales est√°n en variables de entorno del servidor
   ========================================== */

// Variables globales
let currentTraining = null;
let currentSession = null;
let currentParticipation = null;
let currentExamType = 'pretest';
let trainings = [];
let sessions = [];
let participations = [];
let questions = [];
let isConnected = false;

// ==========================================
// INICIALIZACI√ìN
// ==========================================

function initializeApp() {
    console.log('üöÄ Iniciando Sistema de Capacitaciones (Versi√≥n Segura)...');
    console.log('üîê Modo: Netlify Functions - Credenciales en servidor');
    
    // Ocultar pantalla de carga
    setTimeout(() => {
        const loadingScreen = document.getElementById('loadingScreen');
        if (loadingScreen) loadingScreen.classList.add('hidden');
    }, 1500);
    
    // Actualizar fecha y hora
    updateDateTime();
    setInterval(updateDateTime, 60000);
    
    // Verificar par√°metros de URL
    checkUrlParams();
    
    // Cargar tema guardado
    loadTheme();
    
    // Cargar configuraci√≥n (sin credenciales)
    loadConfiguration();
    
    // Inicializar dashboard
    if (isConnected) {
        initializeDashboard();
    }
}

function updateDateTime() {
    const now = new Date();
    const options = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    };
    const dateTimeString = now.toLocaleDateString('es-CO', options);
    
    const dateTimeElement = document.getElementById('currentDateTime');
    if (dateTimeElement) {
        dateTimeElement.textContent = dateTimeString;
    }
}

function checkUrlParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');
    
    if (code) {
        const accessCodeInput = document.getElementById('accessCode');
        if (accessCodeInput) accessCodeInput.value = code;
        switchTab('exam');
        if (isConnected) accessTraining();
    }
}

// ==========================================
// CONFIGURACI√ìN SEGURA (SIN CREDENCIALES)
// ==========================================

function loadConfiguration() {
    console.log('‚ÑπÔ∏è Sistema en modo seguro - Usando Netlify Functions');
    console.log('‚ÑπÔ∏è Credenciales en variables de entorno del servidor');
    
    // No cargamos credenciales del localStorage
    // Solo intentamos conectar a trav√©s del proxy
    testConnection(false);
}

// ==========================================
// FUNCIONES DE AIRTABLE (V√çA PROXY SEGURO)
// ==========================================

async function airtableRequest(method, endpoint, data = null) {
    // ‚ö†Ô∏è IMPORTANTE: TODAS las peticiones pasan por Netlify Functions
    // El servidor usa las credenciales de las variables de entorno
    // El cliente NUNCA maneja credenciales
    
    try {
        const response = await fetch('/.netlify/functions/airtable-proxy', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                method: method,
                path: endpoint,
                body: data
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.error || `Error ${response.status}`);
        }
        
        return await response.json();
    } catch (error) {
        console.error('‚ùå Error en petici√≥n Airtable:', error.message);
        throw error;
    }
}

// ==========================================
// TEST DE CONEXI√ìN
// ==========================================

async function testConnection(showMessage = true) {
    try {
        if (showMessage) {
            showAlert('Probando conexi√≥n...', 'info');
        }
        
        const response = await airtableRequest('GET', '/Capacitaciones?maxRecords=1');
        
        if (response) {
            isConnected = true;
            const connectionStatus = document.getElementById('connectionStatus');
            if (connectionStatus) {
                connectionStatus.textContent = 'Conectado';
                connectionStatus.className = 'badge success';
            }
            
            if (showMessage) {
                showAlert('‚úÖ Conexi√≥n exitosa con Airtable', 'success');
            }
            
            // Inicializar dashboard despu√©s de conexi√≥n exitosa
            initializeDashboard();
            loadTrainings();
            
            return true;
        }
    } catch (error) {
        isConnected = false;
        const connectionStatus = document.getElementById('connectionStatus');
        if (connectionStatus) {
            connectionStatus.textContent = 'Desconectado';
            connectionStatus.className = 'badge danger';
        }
        
        if (showMessage) {
            showAlert(`‚ùå Error de conexi√≥n: ${error.message}`, 'error');
        }
        
        return false;
    }
}

// ==========================================
// NAVEGACI√ìN ENTRE TABS
// ==========================================

function switchTab(tabName) {
    // Actualizar tabs activos
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
        if (tab.dataset.tab === tabName) {
            tab.classList.add('active');
        }
    });
    
    // Actualizar contenido visible
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    const tabContent = document.getElementById(tabName);
    if (tabContent) tabContent.classList.add('active');
    
    // Ejecutar acciones espec√≠ficas de cada tab
    switch(tabName) {
        case 'dashboard':
            initializeDashboard();
            break;
        case 'manage':
            if (isConnected) loadTrainings();
            break;
        case 'reports':
            loadReportOptions();
            break;
    }
}

// ==========================================
// CARGAR DATOS
// ==========================================

async function loadTrainings() {
    try {
        const response = await airtableRequest('GET', '/Capacitaciones');
        if (response && response.records) {
            trainings = response.records;
            displayTrainings();
        }
    } catch (error) {
        console.error('Error cargando capacitaciones:', error);
        showAlert('Error al cargar capacitaciones', 'error');
    }
}

function displayTrainings() {
    console.log(`üìä Capacitaciones cargadas: ${trainings.length}`);
    // Implementar visualizaci√≥n seg√∫n necesidad
}

// ==========================================
// FUNCIONES DE GUARDAR CAPACITACIONES
// ==========================================

// Variable para almacenar el formulario
let trainingFormData = {};

// ==========================================
// CREAR NUEVA CAPACITACI√ìN
// ==========================================

async function createNewTraining() {
    const trainingName = document.getElementById('trainingName')?.value;
    const trainingDescription = document.getElementById('trainingDescription')?.value;
    const trainingDepartment = document.getElementById('trainingDepartment')?.value;
    
    // Validar datos
    if (!trainingName) {
        showAlert('Por favor ingrese el nombre de la capacitaci√≥n', 'error');
        return;
    }
    
    try {
        showAlert('Guardando capacitaci√≥n...', 'info');
        
        // Preparar datos para Airtable
        const data = {
            records: [
                {
                    fields: {
                        'T√≠tulo': trainingName,
                        'Descripci√≥n': trainingDescription || '',
                        'Departamento': trainingDepartment || 'General',
                        'Activa': true,
                        'Fecha Creaci√≥n': new Date().toISOString().split('T')[0]
                    }
                }
            ]
        };
        
        // Hacer petici√≥n POST a Airtable
        const response = await airtableRequest('POST', '/Capacitaciones', data);
        
        if (response && response.records && response.records.length > 0) {
            const newTraining = response.records[0];
            showAlert('‚úÖ Capacitaci√≥n guardada exitosamente', 'success');
            console.log('Capacitaci√≥n creada:', newTraining);
            
            // Limpiar formulario
            clearTrainingForm();
            
            // Recargar lista de capacitaciones
            await loadTrainings();
            
            return newTraining;
        }
    } catch (error) {
        console.error('Error guardando capacitaci√≥n:', error);
        showAlert(`Error al guardar: ${error.message}`, 'error');
    }
}

// ==========================================
// GUARDAR PREGUNTAS DE CAPACITACI√ìN
// ==========================================

async function saveTrainingQuestions(trainingId, questions) {
    if (!trainingId || !questions || questions.length === 0) {
        showAlert('Faltan datos: ID de capacitaci√≥n o preguntas', 'error');
        return false;
    }
    
    try {
        showAlert('Guardando preguntas...', 'info');
        
        // Preparar array de records para batch insert
        const records = questions.map((question, index) => ({
            fields: {
                'Capacitaci√≥n': [trainingId], // Airtable usa array para links
                'N√∫mero': index + 1,
                'Pregunta': question.text,
                'Tipo': question.type || 'pretest', // pretest o post-test
                'Respuestas': question.answers ? JSON.stringify(question.answers) : ''
            }
        }));
        
        // Guardar en lotes (Airtable permite hasta 10 por request)
        const batchSize = 10;
        for (let i = 0; i < records.length; i += batchSize) {
            const batch = records.slice(i, i + batchSize);
            const response = await airtableRequest('POST', '/Preguntas', {
                records: batch
            });
            
            if (!response || !response.records) {
                throw new Error('Error en respuesta de Airtable');
            }
        }
        
        showAlert(`‚úÖ ${questions.length} preguntas guardadas`, 'success');
        return true;
        
    } catch (error) {
        console.error('Error guardando preguntas:', error);
        showAlert(`Error al guardar preguntas: ${error.message}`, 'error');
        return false;
    }
}

// ==========================================
// CREAR SESI√ìN DE CAPACITACI√ìN
// ==========================================

async function createTrainingSession(trainingId) {
    if (!trainingId) {
        showAlert('ID de capacitaci√≥n no v√°lido', 'error');
        return false;
    }
    
    try {
        // Generar c√≥digo de acceso √∫nico
        const accessCode = generateAccessCode();
        const currentDate = new Date().toISOString().split('T')[0];
        
        const data = {
            records: [
                {
                    fields: {
                        'Capacitaci√≥n': [trainingId],
                        'C√≥digo Acceso': accessCode,
                        'Fecha Inicio': currentDate,
                        'Activa': true,
                        'Link Acceso': `${window.location.origin}?code=${accessCode}`
                    }
                }
            ]
        };
        
        const response = await airtableRequest('POST', '/Sesiones', data);
        
        if (response && response.records && response.records.length > 0) {
            const session = response.records[0];
            showAlert('‚úÖ Sesi√≥n creada', 'success');
            console.log('Sesi√≥n creada:', session);
            return session;
        }
        
    } catch (error) {
        console.error('Error creando sesi√≥n:', error);
        showAlert(`Error al crear sesi√≥n: ${error.message}`, 'error');
        return false;
    }
}

// ==========================================
// GUARDAR RESPUESTA DE PARTICIPANTE
// ==========================================

async function saveParticipantAnswer(participationId, questionId, rating) {
    if (!participationId || !questionId || !rating) {
        console.warn('Datos incompletos para guardar respuesta');
        return false;
    }
    
    try {
        const data = {
            records: [
                {
                    fields: {
                        'Participaci√≥n': [participationId],
                        'Pregunta': [questionId],
                        'Calificaci√≥n': parseInt(rating),
                        'Fecha Respuesta': new Date().toISOString().split('T')[0]
                    }
                }
            ]
        };
        
        const response = await airtableRequest('POST', '/Respuestas', data);
        return response && response.records && response.records.length > 0;
        
    } catch (error) {
        console.error('Error guardando respuesta:', error);
        return false;
    }
}

// ==========================================
// REGISTRAR PARTICIPANTE
// ==========================================

async function registerParticipant(sessionId, participantData) {
    if (!sessionId || !participantData.name || !participantData.email) {
        showAlert('Datos incompletos del participante', 'error');
        return false;
    }
    
    try {
        const data = {
            records: [
                {
                    fields: {
                        'Sesi√≥n': [sessionId],
                        'Nombre': participantData.name,
                        'Email': participantData.email,
                        'Cargo': participantData.position || 'No especificado',
                        'Departamento': participantData.department || 'General',
                        'Fecha Registro': new Date().toISOString().split('T')[0],
                        'Completado': false
                    }
                }
            ]
        };
        
        const response = await airtableRequest('POST', '/Participaciones', data);
        
        if (response && response.records && response.records.length > 0) {
            const participation = response.records[0];
            console.log('Participante registrado:', participation);
            return participation;
        }
        
    } catch (error) {
        console.error('Error registrando participante:', error);
        showAlert(`Error al registrar: ${error.message}`, 'error');
        return false;
    }
}

// ==========================================
// ACTUALIZAR CAPACITACI√ìN EXISTENTE
// ==========================================

async function updateTraining(trainingId, updatedData) {
    if (!trainingId) {
        showAlert('ID de capacitaci√≥n no v√°lido', 'error');
        return false;
    }
    
    try {
        showAlert('Actualizando capacitaci√≥n...', 'info');
        
        const data = {
            records: [
                {
                    id: trainingId,
                    fields: updatedData
                }
            ]
        };
        
        const response = await airtableRequest('PATCH', '/Capacitaciones', data);
        
        if (response && response.records && response.records.length > 0) {
            showAlert('‚úÖ Capacitaci√≥n actualizada', 'success');
            await loadTrainings();
            return response.records[0];
        }
        
    } catch (error) {
        console.error('Error actualizando capacitaci√≥n:', error);
        showAlert(`Error al actualizar: ${error.message}`, 'error');
        return false;
    }
}

// ==========================================
// FINALIZAR PARTICIPACI√ìN
// ==========================================

async function completeParticipation(participationId, postTestScore) {
    if (!participationId) {
        showAlert('ID de participaci√≥n no v√°lido', 'error');
        return false;
    }
    
    try {
        const data = {
            records: [
                {
                    id: participationId,
                    fields: {
                        'Post-test Score': postTestScore,
                        'Completado': true,
                        'Fecha Finalizaci√≥n': new Date().toISOString().split('T')[0]
                    }
                }
            ]
        };
        
        const response = await airtableRequest('PATCH', '/Participaciones', data);
        
        if (response && response.records && response.records.length > 0) {
            showAlert('‚úÖ Evaluaci√≥n completada', 'success');
            return response.records[0];
        }
        
    } catch (error) {
        console.error('Error completando participaci√≥n:', error);
        showAlert(`Error: ${error.message}`, 'error');
        return false;
    }
}

// ==========================================
// GENERAR C√ìDIGO DE ACCESO √öNICO
// ==========================================

function generateAccessCode() {
    return 'CAP-' + Date.now().toString(36).toUpperCase() + 
           '-' + Math.random().toString(36).substr(2, 9).toUpperCase();
}

// ==========================================
// LIMPIAR FORMULARIO DE CAPACITACI√ìN
// ==========================================

function clearTrainingForm() {
    const inputs = document.querySelectorAll('#trainingForm input, #trainingForm textarea, #trainingForm select');
    inputs.forEach(input => input.value = '');
    trainingFormData = {};
}

// ==========================================
// UTILIDADES
// ==========================================

function loadTheme() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-mode');
    }
}

function saveTheme(theme) {
    localStorage.setItem('theme', theme);
}

function showAlert(message, type = 'info') {
    console.log(`[${type.toUpperCase()}] ${message}`);
    
    // Usar SweetAlert2 si est√° disponible
    if (typeof Swal !== 'undefined') {
        Swal.fire({
            icon: type,
            title: type === 'success' ? '√âxito' : type === 'error' ? 'Error' : 'Informaci√≥n',
            text: message,
            timer: 3000,
            showConfirmButton: false
        });
    }
}

function initializeDashboard() {
    console.log('üìä Dashboard inicializado');
    // Implementar l√≥gica del dashboard
}

function loadReportOptions() {
    console.log('üìà Opciones de reportes cargadas');
    // Implementar l√≥gica de reportes
}

async function accessTraining() {
    const code = document.getElementById('accessCode').value;
    if (!code) {
        showAlert('Por favor ingrese un c√≥digo de acceso', 'error');
        return;
    }
    
    try {
        showAlert('Buscando capacitaci√≥n...', 'info');
        // Aqu√≠ ir√≠a la l√≥gica para buscar el c√≥digo en Airtable
        console.log('Accediendo a capacitaci√≥n con c√≥digo:', code);
    } catch (error) {
        showAlert('Error al acceder a la capacitaci√≥n', 'error');
    }
}

// ==========================================
// INICIAR AL CARGAR LA P√ÅGINA
// ==========================================

document.addEventListener('DOMContentLoaded', initializeApp);

// ==========================================
// NOTAS DE SEGURIDAD
// ==========================================

/*
üîê SEGURIDAD EN ESTA VERSI√ìN:

1. ‚úÖ NO se guardan credenciales en localStorage
2. ‚úÖ NO se env√≠an credenciales desde el navegador
3. ‚úÖ Todas las peticiones pasan por Netlify Functions
4. ‚úÖ Las credenciales est√°n en variables de entorno del servidor
5. ‚úÖ Comunicaci√≥n cliente-servidor encriptada (HTTPS)
6. ‚úÖ El proxy verifica credenciales en el servidor
7. ‚úÖ Si una sesi√≥n se compromete, las credenciales no se exponen

CONFIGURACI√ìN EN NETLIFY:

Site settings ‚Üí Build & deploy ‚Üí Environment

AIRTABLE_API_KEY=patXXXXXXXXXXXXXXXXXXXXXX
AIRTABLE_BASE_ID=appXXXXXXXXXXXXXX

Estas variables NUNCA est√°n en el c√≥digo, solo en el servidor.

ESTRUCTURA DE AIRTABLE REQUERIDA:

Tablas necesarias:
1. Capacitaciones (T√≠tulo, Descripci√≥n, Departamento, Activa, Fecha Creaci√≥n)
2. Preguntas (Capacitaci√≥n, Tipo, N√∫mero, Pregunta, Respuestas)
3. Sesiones (Capacitaci√≥n, C√≥digo Acceso, Fecha Inicio, Activa, Link Acceso)
4. Participaciones (Sesi√≥n, Nombre, Email, Cargo, Departamento, Completado)
5. Respuestas (Participaci√≥n, Pregunta, Calificaci√≥n, Fecha Respuesta)

EJEMPLO DE USO:

// Crear nueva capacitaci√≥n
await createNewTraining();

// Crear sesi√≥n (requiere ID de capacitaci√≥n)
await createTrainingSession(trainingId);

// Registrar participante
await registerParticipant(sessionId, {
    name: 'Juan P√©rez',
    email: 'juan@hospital.com',
    position: 'Enfermero',
    department: 'Enfermer√≠a'
});

// Guardar respuesta
await saveParticipantAnswer(participationId, questionId, 4);

// Completar participaci√≥n
await completeParticipation(participationId, postTestScore);
*/